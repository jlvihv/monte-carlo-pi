/// 使用蒙特卡罗方法计算圆周率
/// 想象一个正方形，边长为 1，正方形内切一个半径为 1 的圆
/// 圆落在正方形内的部分，是圆的总面积的 1/4
/// 随机生成正方形内的点，计算其落在圆内的概率，乘以 4，就是圆周率的近似值

fn main() {
    let n = [
        100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000,
    ];
    n.iter().for_each(|&i| {
        let pi = monte_carlo(i);
        println!("n = {}, pi = {}", i, pi);
    });
}

fn monte_carlo(n: i32) -> f64 {
    let mut in_count = 0;
    (0..n).for_each(|_| {
        let x = rand::random::<f64>();
        let y = rand::random::<f64>();

        // 求直角三角形的斜边长度
        // (x ** 2 + y ** 2) ** 0.5 <= 1.0
        // 长度在 0 ~ 1 之间的点，落在半径为 1 的圆内
        // 落在圆内的次数，除以总次数，就是落在圆内的概率
        // 落在圆内的概率，乘以 4，就是圆周率的近似值
        let distance = (x * x + y * y).sqrt();
        if distance <= 1.0 {
            in_count += 1;
        }
    });
    in_count as f64 / n as f64 * 4.0
}
